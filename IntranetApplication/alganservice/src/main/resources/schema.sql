CREATE SCHEMA IF NOT EXISTS "Algon_intranet_db";

DROP TABLE IF EXISTS Users CASCADE;

create table Users
(
    id           bigint primary key generated by default as identity not null,
    first_name   varchar(50)  not null,
    last_name    varchar(50)  not null,
    email        varchar(100) not null,
    password     varchar(255) default null,
    address      varchar(255) default null,
    phone        varchar(30)  default null,
    title        varchar(50)  default null,
    bio          varchar(255) default null,
    enabled      boolean      default false,
    non_locked   boolean      default true,
    using_mfa    boolean      default false,
    created_at   timestamp    default current_timestamp,
    image_url    varchar(255) default 'https://cdn-icons-png.flaticon.com/512/149/149071.png',
    constraint UQ_Users_Email unique (email)
);


DROP TABLE IF EXISTS Roles CASCADE ;

create table Roles
(
    id           bigint primary key generated by default as identity not null,
    name         varchar(50)  not null,
    permission   varchar(255)  not null,
    constraint   UQ_Roles_Name unique (name)
);


DROP TABLE IF EXISTS UserRoles;

create table UserRoles
(
    id           bigint primary key generated by default as identity not null,
    user_id      bigint not null references Users(id) on delete cascade on update cascade ,
    role_id      bigint  not null references Roles(id) on delete restrict on update cascade ,
    constraint   UQ_UserRoles_User_Id unique (user_id)
);


DROP TABLE IF EXISTS Events CASCADE;

create table Events
(
    id           bigint primary key generated by default as identity not null,
    type         varchar(50) not null check ( type in ( 'LOGIN_ATTEMPT',
                                                        'LOGIN_ATTEMPT_FAILURE',
                                                        'LOGIN_ATTEMPT_SUCCESS',
                                                        'PROFILE_UPDATE',
                                                        'PROFILE_PICTURE_UPDATE',
                                                        'ROLE_UPDATE',
                                                        'ACCOUNT_SETTINGS_UPDATE',
                                                        'PASSWORD_UPDATE',
                                                        'MFA_UPDATE')),
    description  varchar(255) not null ,
    constraint   UQ_Events_Type unique (type)
);


DROP TABLE IF EXISTS UserEvents;

create table UserEvents
(
    id           bigint primary key generated by default as identity not null,
    user_id      bigint not null references Users(id) on delete cascade on update cascade ,
    event_id     bigint  not null references Events(id) on delete restrict on update cascade ,
    device       varchar(100) default null,
    ip_address   varchar(100) default null,
    created_at   timestamp    default current_timestamp
);


DROP TABLE IF EXISTS AccountVerifications;

create table AccountVerifications
(
    id           bigint primary key generated by default as identity not null,
    user_id      bigint not null references Users(id) on delete cascade on update cascade ,
    url          varchar(255) not null,
    device       varchar(100) default null,
    ip_address   varchar(100) default null,
    --     created_at   timestamp    not null ,
    constraint   UQ_AccountVerification_User_Id unique (user_id) ,
    constraint   UQ_AccountVerification_Url unique (url)
);


DROP TABLE IF EXISTS ResetPasswordVerifications;

create table ResetPasswordVerifications
(
    id                bigint primary key generated by default as identity not null,
    user_id           bigint not null references Users(id) on delete cascade on update cascade ,
    url               varchar(255) not null,
    expiration_date   timestamp    not null ,
    constraint        UQ_ResetPasswordVerifications_User_Id unique (user_id) ,
    constraint        UQ_ResetPasswordVerifications_Url unique (url)
);


DROP TABLE IF EXISTS TwoFactorVerifications;

create table TwoFactorVerifications
(
    id                bigint primary key generated by default as identity not null,
    user_id           bigint not null references Users(id) on delete cascade on update cascade ,
    code              varchar(10) not null,
    expiration_date   timestamp    not null ,
    constraint        UQ_TwoFactorVerifications_User_Id unique (user_id) ,
    constraint        UQ_TwoFactorVerifications_Code unique (code)
);

INSERT INTO Roles(name, permission)
VALUES ('ROLE_USER',    'READ:USER,READ:CUSTOMER'),
       ('ROLE_MANAGER', 'READ:USER,READ:CUSTOMER,UPDATE:USER,UPDATE:CUSTOMER'),
       ('ROLE_ADMIN',   'READ:USER,READ:CUSTOMER,UPDATE:USER,UPDATE:CUSTOMER,CREATE:USER,CREATE:CUSTOMER'),
       ('ROLE_SYSADMIN','READ:USER,READ:CUSTOMER,UPDATE:USER,UPDATE:CUSTOMER,CREATE:USER,CREATE:CUSTOMER,DELETE:USER,DELETE:CUSTOMER');
